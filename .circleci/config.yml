version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflowid:
        type : string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowid >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowid >>
            aws s3 rm s3://udapeople-<< parameters.workflowid >> --recursive
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflowid:
        type : string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail          # Add when this will run
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflowid >>)
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/6XZPMXwv4UrWgTzrhNq4qq/migration_<< parameters.workflowid >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
     # Docker image here
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run test

              
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run test
         
  scan-frontend:
    docker:
    # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
    # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install tar and gzip dependencies
          command: |
            yum install -y  tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            Public_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text )
              echo $Public_IP >> .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure     
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image : python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["66:d2:5e:0a:2a:c6:af:b0:43:ad:02:e2:de:8b:68:5c"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install tar, gzip, ansible, or awscli dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip
            apk add --update openssh-client git
            apk add --no-cache python3 py3-pip && pip3 install --upgrade pip && pip3 install --no-cache-dir awscli && rm -rf /var/cache/apk/*
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 
    

  run-migrations:
    docker:
         # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0

    steps:
    # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            npm install curl

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # exit 1

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "6XZPMXwv4UrWgTzrhNq4qq" in your local terminal first
                  curl --insecure https://kvdb.io/6XZPMXwv4UrWgTzrhNq4qq/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
            # exit 1
    # Here's where you will add some code to rollback on failure   
      - destroy-environment:
            workflowid:
              "${CIRCLE_WORKFLOW_ID:0:7}"   
  


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            apk add --update tar gzip curl
            apk add --update openssh-client git
            apk add --update nodejs
            apk add --update npm
            apk add --update --no-cache aws-cli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

            echo "URL : http://${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}"    
      - revert-migrations:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 


  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16

    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["66:d2:5e:0a:2a:c6:af:b0:43:ad:02:e2:de:8b:68:5c"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            apk add --update tar gzip curl
            apk add --update openssh-client git
            apk add --update nodejs
            apk add --update npm
            apk add --update --no-cache aws-cli

      - run:
          name: Deploy backend
          command: |
            # your code here

            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir ~/project/.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - persist_to_workspace:
          root: ~/
          paths: 
            - project/artifact.tar.gz
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}"    
      - revert-migrations:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.10-alpine3.16

    steps:
      # Checkout code from git
      - checkout

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip curl
            apk add --update openssh-client git
            apk add --update nodejs
            apk add --update npm
            apk add --update --no-cache aws-cli

      - run:
          name: Get backend url
          command: |
            # your code here
              # Fetch and prepare the BACKEND_IP env var
              BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
              echo "$BACKEND_IP"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}"    
      - revert-migrations:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 

  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: alpine:latest

    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip curl
            apk add --update openssh-client git
            apk add --update nodejs
            apk add --update npm
            apk add --update --no-cache aws-cli

      - run:
          name: Get old workflow id
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/oldworkflowid.txt

      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=UdaPeople

      - persist_to_workspace:
          root: ~/
          paths: 
            - oldworkflowid.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}"    
      - revert-migrations:
          workflowid:
            "${CIRCLE_WORKFLOW_ID:0:7}" 



  cleanup:
    docker:
       # Docker image here
      - image: amazon/aws-cli
    steps:
       # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
        # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Remove old stacks and files
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "---Old stacks deleted---"
            else
              "---No stack deleted----"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]